"""
PyAudio Example: Make a wire between input and output (i.e., record a
few samples and play them back immediately).

This is the callback (non-blocking) version.
"""

import audioop
import logging
import numpy as np
import pyaudio
import struct
import time
import threescompanion
import termios, fcntl, sys, os # used for reading key input from terminal

MOVE_FFT = [-1.0918275953147749, -1.1187950161301452, -1.1273435527423961, -1.1890287458444688, -1.1839370844819099, -1.170855973666739, -1.1446758111572968, -1.1317994765898005, -1.1728192250852163, -1.167357259895673, -1.1833221906824738, -1.1581403063264115, -1.0910195461106222, -1.0640947609466072, -1.2487687903928406, -1.2078229563944114, -1.1310405583368608, -1.2108484918997551, -1.262119429403596, -1.1861529412417005, -1.1091224560257333, -1.1849689158269081, -1.1725292581018545, -1.2416623357348617, -1.0362700813992043, -1.072085610092989, -1.1513691633433352, -1.0671116691674243, -1.0275665658057109, -1.1018050655927416, -1.1335947723169975, -1.0189374125893789, -1.1419109621481189, -1.0181759677973039, -0.86281016465188909, -0.88906003294675084, -0.98754489606154405, -0.84110494972289085, -0.43712982165372738, -0.66499413259690732, -0.87380551461020151, -1.1344851171835169, -1.0119043060258122, -1.0133464650880104, -0.99942998643194758, -1.1893231505536297, -0.87319107869546841, -1.1487729837174545, -0.6040496614897819, -0.5146829733107503, -1.1118692294025481, -0.35142624826204183, -0.024678699078671151, -0.82519137301407408, -0.39185652989470832, 0.11671246280487368, 0.18135847729066779, 0.13950991809444435, -0.035263292228287391, -0.42887132551364648, -0.39569968483660323, 0.035904727845116113, -0.13917337909051808, -0.17957058275838289, 0.010478665344753502, -0.10130334446662292, -0.41539450301552305, -0.14657019051590536, -0.41967141307915745, -0.2039075384371305, -0.67333131603648955, -0.9575950628496066, -0.25125295904662992, -0.57612801749940434, 0.081737676446823393, 0.24728328725633908, -0.53987017601645459, -0.59560507742862501, -0.034105276126390693, 0.25417527228531656, -0.25047102858288106, -0.67257877332262761, -0.20981086696771034, 0.35465775574886216, -0.72710765704643543, -0.41693515852831942, -0.18190964264341236, -0.036467049749264291, -0.43361177966163145, 0.3046320420245654, 0.9162288844750992, 0.20372187515764084, 1.2105062363169736, 0.30689858703600814, -0.061475158979698685, 0.47884233576089397, -0.12988218700660115, -0.21165023174364594, 0.46771942746149309, -0.37257537531199891, 0.27472016968879087, -0.46077178179822487, 0.31934763758534146, -0.13014119250232037, 0.25195956927861207, 0.031997432208291432, 0.22107630961713909, -0.39679769509197094, -0.66139301906638193, -0.36971874896372858, 0.17735209145786612, -0.064740210116872365, -0.70836417002242547, -0.86057674611782486, -0.28356987559519919, -0.29281674125841928, 0.56982875556323398, -0.54526055470695467, 0.1523736898682202, -0.047042778503183724, -0.10906902711835298, -0.56426456945945547, -0.22842058563969103, -0.38205844064755623, -0.19450856654488624, 0.21629115311681923, -0.44545643342791075, -0.43222031048180387, 0.35440495324771293, -0.15944980247311213, -0.55765703841418257, -0.014506402418237752, 0.40583233761843873, 0.0036577894678924139, -0.2253372359297714, -0.0021896937235792446, 0.15783093196038145, 0.15176187556180087, 0.15880850398346347, 0.30111242628603163, -0.16042813300972858, 0.036758327251767309, -0.0053764526941977309, 0.27021577288961085, -0.44850382741269779, -0.19931799634195735, -0.12677120897996819, -0.71110749541128127, -0.052745698501333926, 0.44365633928696901, 0.18659588928194859, -0.17539948330575816, 0.37973336750260733, -0.058154675197931827, -0.0047178963868703683, -0.74828646209024963, -0.27898531424686035, -0.64183443043229049, -0.53041421266120881, 0.042728422914457997, -0.22999868430424364, -0.78072735260178461, -0.47838996093490183, -0.5354283335200225, 0.11529926394818313, -0.33001138949210684, -0.11430721924452092, -0.32657363814723528, 0.1565962720182652, 0.032950621317909157, -0.54187041455548979, -0.0062746693889359495, -0.03712161813040793, -0.2769503423154609, 0.23113636616034894, -0.21471987673052895, -0.4630136537312699, -0.34771028960510209, -0.78587558547552439, -0.33451666351092335, -0.017458748203278196, -1.1525663988786596, -0.76787174054686247, -0.45452394954863329, -0.44493166180823951, -0.51072972237247893, -0.64393405049070962, -0.42388481177163206, -0.37444995106141099, -0.45131809273807466, -0.39536982309876656, -0.56931959340737581, -0.44829029794167186, -0.20205256530411742, -0.26670771337461519, -0.51369725664294852, -0.31736078260879519, -0.045536298058676872, -0.35682674339656484, -0.63246992554698234, -0.6636464130116857, -0.59098554704585271, -0.84644978230163104, -0.96293428164618611, -1.0418962952569091, -0.74906434609879047, -0.78307387128001582, -0.80192406581366216, -0.39291091370592768, -0.55733577160535641, -0.46836696466724792, -0.33464900055503932, -0.19788589363380482, -0.4413424614328918, -0.7096086013634284, -0.7989671675072314, -0.69894430539949348, -0.60479060866485823, -0.55560881472701928, -0.29871863356388006, -0.077963135363691372, -0.24556858996733499, -0.56463312740735749, -1.0107419628948957, -0.92161715858584325, -0.60608191041372628, -0.60960467323437961, -0.64165949017396384, -0.73259275749575714, -0.46942884769315807, -0.73451843315633192, -0.6152333711145197, -0.7312442365077696, -0.58135406512959897, -0.72270386453548308, -0.85304712280298012, -0.64039674810732095, -0.76455933859323544, -0.96514841946823759, -0.88892188002526873, -0.84853869346810051, -0.75742443305163665, -0.93540044656527965, -0.92966942309638689, -0.95479642988276314, -0.97803152004399774, -0.99695098343827304, -0.92689364268005203, -0.91391119408026222, -1.103314340642422, -1.0812845349412394, -1.112841238735256]

WIDTH = 2
CHANNELS = 2
RATE = 44100

class SoundListener:
    def __init__(self, game):
        self.game = game
        self.soundLength = 0
        self.prevSoundValue = 0
        self.peakReached = False
        self.timeSinceSilence = 0
        self.timeSinceLastMove = 0
        
        self.p = pyaudio.PyAudio()
        
        self.fd = sys.stdin.fileno()

        self.oldterm = termios.tcgetattr(self.fd)
        self.newattr = termios.tcgetattr(self.fd)
        self.newattr[3] = self.newattr[3] & ~termios.ICANON & ~termios.ECHO
        termios.tcsetattr(self.fd, termios.TCSANOW, self.newattr)

        self.oldflags = fcntl.fcntl(self.fd, fcntl.F_GETFL)
        fcntl.fcntl(self.fd, fcntl.F_SETFL, self.oldflags | os.O_NONBLOCK)
        
        logging.basicConfig(filename='threes.log',level=logging.DEBUG)

    def moveCheck(self, in_data):
        if (self.findSoundCorrelation(in_data) > 0.3) & (self.timeSinceLastMove > 15):
            self.timeSinceLastMove = 0
            self.game.processIncrement()
            logging.debug("Move detected")


    def findAudioChannel(self):
        for i in range(0, self.p.get_device_count()):
            if self.p.get_device_info_by_index(i)["name"] == "Soundflower (2ch)":
                return i
        return None

    def findSoundCorrelation(self, in_data):
        fmt = "%dH"%(len(in_data)/2)
        data2 = struct.unpack(fmt, in_data)
        data2 = np.array(data2, dtype='h')
        fourier = np.fft.fft(data2)
        ffty = np.abs(fourier[0:len(fourier)/2])/1000
        ffty1=ffty[:len(ffty)/2]
        ffty2=ffty[len(ffty)/2::]+2
        ffty2=ffty2[::-1]
        ffty=ffty1+ffty2
        ffty=np.log(ffty)-2
    
        fourier = list(ffty)[4:-4]
        fourier = fourier[:len(fourier)/2]
        
        return np.corrcoef(MOVE_FFT, fourier)[0][1]
        
    def listenCallback(self, in_data, frame_count, time_info, status):
        self.moveCheck(in_data)
        self.timeSinceLastMove += 1
        return (in_data, pyaudio.paContinue)


    def listen(self):
        channel = self.findAudioChannel()
        stream = self.p.open(format=self.p.get_format_from_width(WIDTH),
                channels=CHANNELS,
                rate=RATE,
                input=True,
                output=False,
                input_device_index=channel,
                stream_callback=self.listenCallback)
        

        stream.start_stream()

        try:
            while stream.is_active():
                self.tryToFindKey()
                time.sleep(0.1)
        finally:
            termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.oldterm)
            fcntl.fcntl(self.fd, fcntl.F_SETFL, self.oldflags)

        stream.stop_stream()
        stream.close()
        
    def close(self):
        self.p.terminate()
        
    def tryToFindKey(self):
        try:
            c = sys.stdin.read(1)
            self.game.processKey(repr(c))
        except IOError: pass
        
def start(game):
    listener = SoundListener(game)
    listener.listen()   